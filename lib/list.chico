fun make (H) -> 
  apply append H 0 done
done

fun append (H T) ->
  apply pair.make H T done
done

fun for (List Callback) ->
  let iterate = fun (Self) ->
    fun (N) ->
      let H = apply pair.head N done
      let T = apply pair.tail N done

      match T with
        (0) ->  apply 1 done
        (_) ->  
          apply Callback H done
          apply Self T done
      done
    done
  done

  let bind = apply recur.wrap iterate done

  apply bind List done
done

fun start () -> 
  let A = apply make 1 done

  let B = apply append 2 A done
  let C = apply append 2 B done

  let Callback = fun (V) ->
    apply erlang.display V done
  done

  apply for C Callback done
done
