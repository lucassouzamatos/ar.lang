fun start () ->
  let recur = fun (F) -> 
    let Recursion = fun (X) ->
      apply X X done
    done

    let Bind = fun (X) ->
      let Inner = fun (Y) ->
        let A = apply X X done
        apply A Y done
      done

      apply F Inner done
    done

    apply Recursion Bind done
  done

  let builder = fun (Self) ->
    fun (N) ->
      match N with
        (1) -> 1 done
        (_) -> 
          let X = apply - N 1 done
          let Y = apply Self X done

          apply * N Y done
      done
    done
  done

  let factorial = apply recur builder done

  apply factorial 4 done
done
